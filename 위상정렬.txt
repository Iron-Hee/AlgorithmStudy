사이클이 없는 방향 그래프에서 정점들을 선형으로 정렬하는 것

BFS를 통한 위상 정렬 / DFS를 통한 위상 정렬

BFS를 통한 위상 정렬
입력 차수가 0인 노드들 먼저 큐에 삽입
큐에 들어온 노드 탐색하며 현재 탐색하는 노드에서 출발하는 간선들을 제거, (끝 노드들의 입력차수를 감소)
입력차수가 0이 된 노드들을 큐에 추가

사이클 존재하면 큐가 빌 때까지 해도 탐색하지 못한 노드 존재하게 됨

#define MAX_NODE 10000

vector<int> edges[MAX_NODE];
queue<int> q;
int cur_node;
int in_degree[MAX_NODE];
int edge_cnt;
int s, e;

void graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e;
		edges[s].push_back(e);
		in_degree[e] += 1;
	}
}

void topological_sort(int start_node) {
	for(int i=0; i<MAX_NODE; i++) {
		if(in_degree[i] == 0)
			q.push(i);
	}
	while(!q.empty()) {
		cur_node = q.front();
		q.pop();

		cout << "현재 노드 : " << cur_node << '\n';
		for(int next_node : edges[cur_node]) {
			in_degree[next_node] -= 1;
			if(in_degree[next_node] == 0)
				q.push(next_node);
		}
	}
}


DFS를 통한 위상 정렬
탐색이 끝나는 순서의 역순이 위상 정렬