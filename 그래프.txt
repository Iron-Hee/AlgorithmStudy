그래프 : 정점과 간선으로 이루어진 자료구조
연결 요소 : 간선들로 연결된 노드들의 집합, 그래프 상에서 이어져 있는 노드들

정점의 표현 : 배열, 리스트
간선의 표현 : 인접 리스트, 인접 행렬, 1차원 배열

E : 가중치가 존재하지 않는 경우, 간선의 끝, 간선의 존재 유무 정보
{E, W} : 가중치가 존재하는 경우, 가중치를 같이 저장
Struct : 여러 정보가 필요한 경우, (시작, 끝, 가중치 등)

[인접 리스트]
노드 개수만큼 리스트에 간선을 저장
벡터나 연결 리스트 등을 사용
K번째 리스트는 K 노드에서 출발하는 간선을 저장

#define MAX_NODE 10000

vector<pair<int, int>> edges[MAX_NODE]
int edge_cnt;
int s, e, w;

void directed_graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e >> w;
		edges[s].push_back({e, w});
	}
}

void undirected_graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e >> w;
		edges[s].push_back({e, w});
		edges[e].push_back({s, w});
	}
}

[인접 행렬]
노드 개수 * 노드 개수 크기의 2차원 배열에 저장

#define MAX_NODE 10000

int edges[MAX_NODE][MAX_NODE];
int edge_cnt;
int s, e, w;

void directed_graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e >> w;
		edges[s][e] = w;
	}
}

void undirected_graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e >> w;
		edges[s][e] = w;
		edges[e][s] = w;
	}
}

[1차원 배열]
하나의 배열에 모든 간선 저장
노드별 간선의 구분이 어렵고, 중간에 추가 및 삭제가 어렵다.

typedef pair<pair<int, int>, int> edge;
vector<edge> edges;
int edge_cnt;
int s, e, w;

void directed_graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e >> w;
		edges.push_back({{s, e}, w});
	}
}

void undirected_graph_init() {
	cin >> edge_cnt;
	for(int i=0; i<edge_cnt; i++) {
		cin >> s >> e >> w;
		edges.push_back({{s, e}, w});
		edges.push_back({{e, s}, w});
	}
}



그래프 순회
DFS와 BFS

DFS
스택 이용
방문 방법 : 방문하기 전 노드를 방문했는지 확인, 방문하지 않은 경우 노드 방문

#define MAX_NODE 10000

vector<int> edges[MAX_NODE];
bool is_visit[MAX_NODE];

void dfs(int cur_node) {
	if(is_visit[cur_node]) return;
	is_visit[cur_node] = true;
	cout << "현재 노드 : " << cur_node << '\n';
	for(int next_node : edges[cur_node])
		dfs(next_node);
}

#define MAX_NODE 10000

vector<int> edges[MAX_NODE];
bool is_visit[MAX_NODE];

void dfs(int cur_node) {
	is_visit[cur_node] = true;
	cout << "현재 노드 : " << cur_node << '\n';
	for(int next_node : edges[cur_node])
		if(!is_visit[cur_node])
			dfs(next_node);
}

BFS
큐를 이용
큐에 넣을 때 방문 체크 해야 중복된 노드 안 들어감

#define MAX_NODE 10000

vector<int> edges[MAX_NODE];
queue<int> q;
bool is_visit[MAX_NODE];
int cur_node;

void bfs(int start_node) {
	q.push(start_node);
	is_visit[start_node] = true;
	while(!q.empty()) {
		cur_node = q.front();
		q.pop();

		cout << "현재 노드 : " << cur_node << '\n';
		for (int next_node : edges[cur_node]) {
			if (!is_visit[next_node]) {
				q.push(next_node);
				is_visit[next_node] = true;
			}
		}
	}
}